package JDBC_CW.ru.kpfu.itis.jdbc;


import java.io.FileInputStream;
import java.io.IOException;
import java.sql.*;
import java.util.Properties;

public class DataBaseControl {
    public void testConnection() throws SQLException, ClassNotFoundException, IOException {
        Connection connection = null;        // Класс для работы с БД
        try {
            connection = getConnection();
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    private static Connection getConnection() throws IOException, ClassNotFoundException, SQLException {
        Properties props = new Properties();                  // Доп класс для считывание данных с файла
        props.load(new FileInputStream("data/db.properties"));     // Считывание (загрузка) из файла
        String driver = props.getProperty("driver");
        String url = props.getProperty("url");
        String user = props.getProperty("user");
        String pass = props.getProperty("pass");
        Class.forName(driver);                                // Проверка правильности подключения драйвера
        return DriverManager.getConnection(url, user, pass);  // Открытие соединения к БД
    }

    public void CreateDepartmentTable() throws SQLException, ClassNotFoundException, IOException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();    // Тип SQL запроса
            statement.executeUpdate("create table if not exists Department " +
                    "(id bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, " +
                    "dname VARCHAR ,office VARCHAR)");
            // ^ для SQL запросов, которые не возвращают никаких значений, т.е. не SELECT
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }
    public void CreateEmployeeTable() throws SQLException, ClassNotFoundException, IOException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();    // Тип SQL запроса
            statement.executeUpdate("create table if not exists Employee " +
                    "(id bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, " +
                    "ename VARCHAR ,birthday VARCHAR ,phone VARCHAR ,addres VARCHAR ,gender INT ,wage INT," +
                    " head_id INT ,department_id INT ,position_id INT)");
            // ^ для SQL запросов, которые не возвращают никаких значений, т.е. не SELECT
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }
    public void CreatePositionTable() throws SQLException, ClassNotFoundException, IOException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();    // Тип SQL запроса
            statement.executeUpdate("create table if not exists Positionn" +
                    "(id bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, " +
                    "pname VARCHAR ,duties VARCHAR)");
            // ^ для SQL запросов, которые не возвращают никаких значений, т.е. не SELECT
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }



    public void add(String name, String birthday, String phone, String address, int gender, int wage, int head_id, int department_id, int position_id) throws SQLException, ClassNotFoundException, IOException {
        Connection connection = null;
        try {
            connection = getConnection();
            PreparedStatement statement = connection.prepareStatement("insert into Employee(ename,birthday,phone,addres,gender,wage,head_id,department_id,position_id) values (?,?,?,?,?,?,?,?,?)");
            // ^ гарантирует отсутствие SQL-инъекций
//            statement.setInt(1,countEmp++);
            statement.setString(1, name);
            statement.setString(2, birthday);
            statement.setString(3, phone);
            statement.setString(4, address);
            statement.setInt(5, gender);
            statement.setInt(6, wage);
            statement.setInt(7, head_id);
            statement.setInt(8, department_id);
            statement.setInt(9, position_id);
            statement.executeUpdate();
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }
    public void add(String table_name,String name, String office_duties) throws SQLException, ClassNotFoundException, IOException {
        String table = table_name.equals("Department") ? "Department (dname, office)" : "Positionn (pname,duties)";
        Connection connection = null;
        try {
            connection = getConnection();
            PreparedStatement statement = connection.prepareStatement("insert into "+ table +" values (?,?)");
            // ^ гарантирует отсутствие SQL-инъекций
            statement.setString(1, name);
            statement.setString(2, office_duties);
            statement.executeUpdate();
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    public void getAll(String tn) throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from " + tn);
            // ^ для запросов которые что то возвращают, они получают тип ResultSet
            while (resultSet.next()) {  // начальный указатель стоит на -1, сразу происходит
                // переход на новую строку и возврат bool значения
                if(tn.equals("Department")){
//                int id = resultSet.getInt("d_id");
                String name = resultSet.getString("dname");
                String office = resultSet.getString("office");
                System.out.println("name : " + name + " office : " + office);
                } else if(tn.equals("Positionn")){
//                    int id = resultSet.getInt("p_id");
                    String name = resultSet.getString("pname");
                    String office = resultSet.getString("duties");
                    System.out.println("name : " + name + " address : " + office);

                } else {
//                    int id = resultSet.getInt("e_id");
                    String name = resultSet.getString("e_name");
                    String birthday = resultSet.getString("birthday");
                    String phone = resultSet.getString("phone");
                    String address = resultSet.getString("address");
                    String gender = resultSet.getInt("gender")== 1 ? "women":"man";
                    int wage = resultSet.getInt("wage");
                    int head_id = resultSet.getInt("head_id");
                    int department_id = resultSet.getInt("department_id");
                    int position_id = resultSet.getInt("position_id");
                    System.out.println("name : " + name + " birthday : " + birthday + " phone : " + phone
                    + " address : " + address + " gender : " + gender + " wage : " + wage + "head_id : " + head_id
                    + "deparment_id : " + department_id + " position_id : " + position_id);
                }
            }
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    public void getAllWithWage(int min_wage) throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from Employee where wage > min_wage");
            // ^ для запросов которые что то возвращают, они получают тип ResultSet
            while (resultSet.next()) {  // начальный указатель стоит на -1, сразу происходит
                // переход на новую строку и возврат bool значения
//                int id = resultSet.getInt("e_id");
                String name = resultSet.getString("e_name");
                String birthday = resultSet.getString("birthday");
                String phone = resultSet.getString("phone");
                String address = resultSet.getString("address");
                int gender = resultSet.getInt("gender");
                int wage = resultSet.getInt("wage");
                int head_id = resultSet.getInt("head_id");
                int department_id = resultSet.getInt("department_id");
                int position_id = resultSet.getInt("position_id");
                System.out.println("name : " + name + " birthday : " + birthday + " phone : " + phone
                        + " address : " + address + " gender : " + gender + " wage : " + wage + "head_id : " + head_id
                        + "deparment_id : " + department_id + " position_id : " + position_id);
            }
            } finally {
                if (connection != null) {
                connection.close();
            }
        }
    }

//    }

    public void getAllPensioners() throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from Employee where SELECT DATEDIFF(YEAR,birthday,'25.10.2015') > 60 and gender = 0");
            ResultSet resultSet1 = statement.executeQuery("select * from Employee where DATEDIFF(YEAR,birthday,'25.10.2015') > 55 and gender = 1");
            while (resultSet.next()) {  // начальный указатель стоит на -1, сразу происходит
                String name = resultSet.getString("e_name");
                String birthday = resultSet.getString("birthday");
                String phone = resultSet.getString("phone");
                String address = resultSet.getString("address");
                int gender = resultSet.getInt("gender");
                int wage = resultSet.getInt("wage");
                int head_id = resultSet.getInt("head_id");
                int department_id = resultSet.getInt("department_id");
                int position_id = resultSet.getInt("position_id");
                System.out.println("name : " + name + " birthday : " + birthday + " phone : " + phone
                        + " address : " + address + " gender : " + gender + " wage : " + wage + "head_id : " + head_id
                        + "deparment_id : " + department_id + " position_id : " + position_id);
                if(!resultSet.next()) resultSet=resultSet1;
            }
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    public void getAllManagersFromDep(String dep_name,String pos_name) throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {                                                 //EDIT
            connection = getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from Employee where position_id = (select id from Positionn where name = pos_name) and " +
                                                         " department_id = (select id from Department where name = dep_name)");
            // ^ для запросов которые что то возвращают, они получают тип ResultSet
            while (resultSet.next()) {  // начальный указатель стоит на -1, сразу происходит
                // переход на новую строку и возврат bool значения
//                int id = resultSet.getInt("e_id");
                String name = resultSet.getString("e_name");
                String birthday = resultSet.getString("birthday");
                String phone = resultSet.getString("phone");
                String address = resultSet.getString("address");
                String gender = resultSet.getInt("gender") == 1 ? "woman":"man";
                int wage = resultSet.getInt("wage");
                int head_id = resultSet.getInt("head_id");
                int department_id = resultSet.getInt("department_id");
                int position_id = resultSet.getInt("position_id");
                System.out.println("name : " + name + " birthday : " + birthday + " phone : " + phone
                        + " address : " + address + " gender : " + gender + " wage : " + wage + "head_id : " + head_id
                        + "deparment_id : " + department_id + " position_id : " + position_id);
            }
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    public void getByFIO(String sname,String table_name) throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from " + table_name + " where name = sname ");
            // ^ для запросов которые что то возвращают, они получают тип ResultSet
            while (resultSet.next()) {  // начальный указатель стоит на -1, сразу происходит
                // переход на новую строку и возврат bool значения
                String pnumber = resultSet.getString("pnumber");
                System.out.println("pnumber =" + pnumber + " name =" + sname);
            }
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }
    public void dismiss(String posname,String depname,int wwage) throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {                                                 //EDIT
            connection = getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("delete from Employee where position_id = (select id from Positionn where name = pos_name) and " +
                    " department_id = (select id from Department where name = dep_name) and DATEDIFF(YEAR,birthday,'25.10.2015') < 18 and wage > 15000");
            // ^ для запросов которые что то возвращают, они получают тип ResultSet
            while (resultSet.next()) {  // начальный указатель стоит на -1, сразу происходит
                // переход на новую строку и возврат bool значения
//                int id = resultSet.getInt("e_id");
                String name = resultSet.getString("e_name");
                String birthday = resultSet.getString("birthday");
                String phone = resultSet.getString("phone");
                String address = resultSet.getString("address");
                String gender = resultSet.getInt("gender") == 1 ? "woman":"man";
                int wage = resultSet.getInt("wage");
                int head_id = resultSet.getInt("head_id");
                int department_id = resultSet.getInt("department_id");
                int position_id = resultSet.getInt("position_id");
                System.out.println("name : " + name + " birthday : " + birthday + " phone : " + phone
                        + " address : " + address + " gender : " + gender + " wage : " + wage + "head_id : " + head_id
                        + "deparment_id : " + department_id + " position_id : " + position_id);
            }
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }
    public void wageUp(String name,int percent) throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            PreparedStatement statement = connection.prepareStatement("update Employee set wage = wage*? where ename = ?");
            // ^ гарантирует отсутствие SQL-инъекций
            statement.setInt(1, percent);
            statement.setString(2, name);
            statement.executeUpdate();
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    public void deleteByName(String name,String table_name) throws SQLException, IOException, ClassNotFoundException {
        String sname = "";
        switch (table_name){
            case "Department" : {
                sname = "dname";
                break;
            }
            case "Employee": {
                sname = "ename";
                break;
            }
            case "Positionn": {
                sname = "pname";
                break;
            }
        }
        Connection connection = null;
        try {
            connection = getConnection();
            PreparedStatement ps = connection.prepareStatement("delete from " + table_name + " where " + sname + " = ?");
            ps.setString(1, name);
            ps.executeUpdate();
        } finally {
            if(connection != null){
                connection.close();
            }
        }
    }

    public void drop(String table_name) throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            PreparedStatement statement = connection.prepareStatement("DROP TABLE " + table_name);
            // ^ гарантирует отсутствие SQL-инъекций
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

}
