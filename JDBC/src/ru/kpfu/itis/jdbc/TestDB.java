package ru.kpfu.itis.jdbc;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.*;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Properties;


public class TestDB {
    public static void main(String[] args) {
        try {
            testConnection();
//            testCreate();
//            testInsert("address-" + System.currentTimeMillis(), new Date());
//            testUpdate(0, "my address");
//            testSelect();
//            testTransactions();
//            testSelect();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void testConnection() throws SQLException, ClassNotFoundException, IOException {
        Connection connection = null;        // Класс для работы с БД
        try {
            connection = getConnection();
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    private static Connection getConnection() throws IOException, ClassNotFoundException, SQLException {
        Properties props = new Properties();                  // Доп класс для считывание данных с файла
        props.load(new FileInputStream("data/db.properties"));     // Считывание (загрузка) из файла
        String driver = props.getProperty("driver");
        String url = props.getProperty("url");
        String user = props.getProperty("user");
        String pass = props.getProperty("pass");
        Class.forName(driver);                                // Проверка правильности подключения драйвера
        return DriverManager.getConnection(url, user, pass);  // Открытие соединения к БД
    }

    private static void testCreate() throws SQLException, ClassNotFoundException, IOException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();    // Тип SQL запроса
            statement.executeUpdate("create table if not exists orders " +
                    "(id bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, " +
                    "address varchar, creation_date timestamp)");
            // ^ для SQL запросов, которые не возвращают никаких значений, т.е. не SELECT
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    private static void testInsert(String address, Date creationDate) throws SQLException, ClassNotFoundException, IOException {
        Connection connection = null;
        try {
            connection = getConnection();
            PreparedStatement statement = connection.prepareStatement("insert into orders (address, creation_date) values (?,?)");
            // ^ гарантирует отсутствие SQL-инъекций
            statement.setString(1, address);
            statement.setTimestamp(2, new Timestamp(creationDate.getTime()));
            statement.executeUpdate();
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    private static void testUpdate(Integer id, String address) throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            PreparedStatement statement = connection.prepareStatement("update orders set address = ? where id = ?");
            // ^ гарантирует отсутствие SQL-инъекций
            statement.setString(1, address);
            statement.setInt(2, id);
            statement.executeUpdate();
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    private static void testSelect() throws ClassNotFoundException, IOException, SQLException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from orders");
            // ^ для запросов которые что то возвращают, они получают тип ResultSet
            while (resultSet.next()) {  // начальный указатель стоит на -1, сразу происходит
                                        // переход на новую строку и возврат bool значения
                long id = resultSet.getLong("id");
                String address = resultSet.getString("address");
                Timestamp timestamp = resultSet.getTimestamp("creation_date");
                System.out.println("id=" + id + " address=" + address + " creationDate=" + timestamp.toString());
            }
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    private static void testTransactions() throws ClassNotFoundException, IOException, SQLException {
        // Транзакция - выполнение только целого блока действий,
        // если произошла хотя бы одна ошибка, то отменяются сразу все действия
        // если все прошло хорошо, то происходит Commit - подтверждение сразу всех действий
        Connection connection = getConnection();
        connection.setAutoCommit(false);  // обязательно либо commit, либо rollback
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("delete from orders");
            statement.executeUpdate("insert into orders (address,creation_date) values('new address', '2009-11-02')");
            connection.commit();    // подтверждение действий
        } catch (SQLException e) {
            connection.rollback();  // откат - отмена всех действий
            throw e;
        } finally {
            connection.close();
        }
    }
}