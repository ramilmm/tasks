package ru.kpfu.itis.jdbc;


import java.io.FileInputStream;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.Properties;

public class NoteBookWithDB {
    ArrayList<Note> notes = new ArrayList<>();

    public void testConnection() throws SQLException, ClassNotFoundException, IOException {
        Connection connection = null;        // Класс для работы с БД
        try {
            connection = getConnection();
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    private static Connection getConnection() throws IOException, ClassNotFoundException, SQLException {
        Properties props = new Properties();                  // Доп класс для считывание данных с файла
        props.load(new FileInputStream("data/db.properties"));     // Считывание (загрузка) из файла
        String driver = props.getProperty("driver");
        String url = props.getProperty("url");
        String user = props.getProperty("user");
        String pass = props.getProperty("pass");
        Class.forName(driver);                                // Проверка правильности подключения драйвера
        return DriverManager.getConnection(url, user, pass);  // Открытие соединения к БД
    }

    public void CreateTable() throws SQLException, ClassNotFoundException, IOException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();    // Тип SQL запроса
            statement.executeUpdate("create table if not exists notebook " +
                    "(id bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, " +
                    "name varchar, pnumber VARCHAR , bday VARCHAR )");
            // ^ для SQL запросов, которые не возвращают никаких значений, т.е. не SELECT
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }



    public  void Update(String name, String pnumber) throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            PreparedStatement statement = connection.prepareStatement("update notebook set name = ? where pnumber = ?");
            // ^ гарантирует отсутствие SQL-инъекций
            statement.setString(1, name);
            statement.setString(2, pnumber);
            statement.executeUpdate();
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    public void Transactions() throws ClassNotFoundException, IOException, SQLException {
        // Транзакция - выполнение только целого блока действий,
        // если произошла хотя бы одна ошибка, то отменяются сразу все действия
        // если все прошло хорошо, то происходит Commit - подтверждение сразу всех действий
        Connection connection = getConnection();
        connection.setAutoCommit(false);  // обязательно либо commit, либо rollback
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("delete from notebook");
            statement.executeUpdate("insert into notebook (name,pnumber,bday) values('Ramil', '+79178894274','04.09.1996')");
            connection.commit();    // подтверждение действий
        } catch (SQLException e) {
            connection.rollback();  // откат - отмена всех действий
            throw e;
        } finally {
            connection.close();
        }
    }

    public void getAll() throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from notebook");
            // ^ для запросов которые что то возвращают, они получают тип ResultSet
            while (resultSet.next()) {  // начальный указатель стоит на -1, сразу происходит
                // переход на новую строку и возврат bool значения
                int id = resultSet.getInt("id");
                String pnumber = resultSet.getString("pnumber");
                String name = resultSet.getString("name");
                String bday = resultSet.getString("bday");
                System.out.println("id = " + id +  " name = " + name + " pnumber = " + pnumber + " birthday = " + bday);
            }
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    public void add(String name, String pnumber, String bday) throws SQLException, ClassNotFoundException, IOException {

        notes.add(new Note(name,pnumber,bday));
        Connection connection = null;
        try {
            connection = getConnection();
            PreparedStatement statement = connection.prepareStatement("insert into notebook (name, pnumber, bday) values (?,?,?,?)");
            // ^ гарантирует отсутствие SQL-инъекций
            statement.setString(1, name);
            statement.setString(2, pnumber);
            statement.setString(3, bday);
            statement.executeUpdate();
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    public void deleteByName(String name) throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            PreparedStatement ps = connection.prepareStatement("delete from notebook where name= ?");
            ps.setString(1, name);
            ps.executeUpdate();
        } finally {
            if(connection != null){
                connection.close();
            }
        }
    }
    public void getFirst() throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from notebook " +
                                                         "where name = (select min(name) from notebook)");
            // ^ для запросов которые что то возвращают, они получают тип ResultSet
            while (resultSet.next()) {  // начальный указатель стоит на -1, сразу происходит
                // переход на новую строку и возврат bool значения
                String pnumber = resultSet.getString("pnumber");
                String name = resultSet.getString("name");
                System.out.println("pnumber =" + pnumber + " name =" + name);
            }
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    public void getByFIO(String sname) throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from notebook where name = sname ");
            // ^ для запросов которые что то возвращают, они получают тип ResultSet
            while (resultSet.next()) {  // начальный указатель стоит на -1, сразу происходит
                // переход на новую строку и возврат bool значения
                String pnumber = resultSet.getString("pnumber");
                System.out.println("pnumber =" + pnumber + " name =" + sname);
            }
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    public void updateById(Note note) throws SQLException, IOException, ClassNotFoundException {
        Connection connection = null;
        try {
            connection = getConnection();
            PreparedStatement statement = connection.prepareStatement("update notebook set name = ? where id = ?");
            // ^ гарантирует отсутствие SQL-инъекций
            statement.setString(1, note.getName());
            statement.setInt(2, note.getId());
            statement.executeUpdate();
        } finally {
            if (connection != null) {
                connection.close();
            }
        }

    }



}
